{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["RandomIcon","_ref","iconName","react_default","a","createElement","md","io","gi","Error","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","countCorrect","setCountCorrect","_React$useState3","_React$useState4","countAttempts","setCountAttempts","_React$useState5","_React$useState6","iconPressed","setIconPressed","_React$useState7","_React$useState8","setIconName","useEffect","timer","setInterval","index","_","random","0","1","2","3","window","clearInterval","useKey","pressedKey","event","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key","dependencies","className","style","fontSize","color","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAQA,SAASA,EAATC,GAAuC,IAAjBC,EAAiBD,EAAjBC,SACpB,GAAiB,UAAbA,EACF,OAAO,KAET,GAAiB,MAAbA,EACF,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAET,GAAiB,WAAbJ,EACF,OAAOC,EAAAC,EAAAC,cAACE,EAAA,EAAD,MAET,GAAiB,WAAbL,EACF,OAAOC,EAAAC,EAAAC,cAACE,EAAA,EAAD,MAET,GAAiB,aAAbL,EACF,OAAOC,EAAAC,EAAAC,cAACG,EAAA,EAAD,MAET,MAAM,IAAIC,MAAM,iBAqEHC,MAlEf,WAAe,IAAAC,EAC2BC,IAAMC,SAAS,GAD1CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACQI,EADRJ,EAAA,GAAAK,EAE6BP,IAAMC,SAAS,GAF5CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAESE,EAFTF,EAAA,GAAAG,EAGyBX,IAAMC,SAAwB,MAHvDW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAAAG,EAKmBf,IAAMC,SAAiB,SAL1Ce,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKNzB,EALM0B,EAAA,GAKIC,EALJD,EAAA,GAiDb,OA3CAhB,IAAMkB,UACJ,WACE,IAAIC,EAeJ,OAdAA,EAAQC,YAAY,WAClB,IAAMC,EAAQC,IAAEC,OAAO,EAAG,GAQ1BN,EAP2C,CACzCO,EAAG,IACHC,EAAG,SACHC,EAAG,SACHC,EAAG,YAE4BN,IAEjCX,EAAiBD,EAAgB,GACjCK,EAAe,OACd,KAEI,WACLc,OAAOC,cAAcV,KAGzB,CAACV,EAAenB,IAGlBwC,IACE,SAACC,EAAoBC,GACnB,IAMMnB,EANqC,CACzCoB,UAAW,SACXC,WAAY,SACZC,QAAS,WACTC,UAAW,KAEeJ,EAAMK,KAC9BxB,IAAgBvB,GAElBgB,EAAgBD,EAAe,GAEjCS,EAAeD,IAEjB,GACA,CAAEyB,aAAc,CAAChD,EAAUuB,EAAaR,KAIxCd,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,uFACbhD,EAAAC,EAAAC,cAAA,OAAK+C,MAAO,CAAEC,SAAU,KACrBpC,EADH,MACoBI,GAEpBlB,EAAAC,EAAAC,cAAA,OACE+C,MAAO,CACLC,SAAU,IACVC,MAAO7B,IAAgBvB,EAAW,OAAS,UAG7CC,EAAAC,EAAAC,cAACL,EAAD,CAAYE,SAAUA,OC3EVqD,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f9f964b.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdClear } from \"react-icons/md\";\nimport { IoIosSquareOutline, IoIosRadioButtonOff } from \"react-icons/io\";\nimport { GiTriangleTarget } from \"react-icons/gi\";\nimport useKey from \"use-key-hook\";\nimport _ from \"lodash\";\nimport \"./App.css\";\n\nfunction RandomIcon({ iconName }: any) {\n  if (iconName === \"empty\") {\n    return null;\n  }\n  if (iconName === \"x\") {\n    return <MdClear />;\n  }\n  if (iconName === \"circle\") {\n    return <IoIosRadioButtonOff />;\n  }\n  if (iconName === \"square\") {\n    return <IoIosSquareOutline />;\n  }\n  if (iconName === \"triangle\") {\n    return <GiTriangleTarget />;\n  }\n  throw new Error(\"Invalid index\");\n}\n\nfunction App() {\n  const [countCorrect, setCountCorrect] = React.useState(0);\n  const [countAttempts, setCountAttempts] = React.useState(0);\n  const [iconPressed, setIconPressed] = React.useState<string | null>(null);\n\n  const [iconName, setIconName] = React.useState<string>(\"empty\");\n  React.useEffect(\n    () => {\n      let timer: any;\n      timer = setInterval(() => {\n        const index = _.random(0, 3);\n        const mapping: { [key: number]: string } = {\n          0: \"x\",\n          1: \"circle\",\n          2: \"square\",\n          3: \"triangle\"\n        };\n        const iconName: string = mapping[index];\n        setIconName(iconName);\n        setCountAttempts(countAttempts + 1);\n        setIconPressed(null);\n      }, 1000);\n\n      return () => {\n        window.clearInterval(timer);\n      };\n    },\n    [countAttempts, iconName]\n  );\n\n  useKey(\n    (pressedKey: number, event: any) => {\n      const mapping: { [key: string]: string } = {\n        ArrowLeft: \"square\",\n        ArrowRight: \"circle\",\n        ArrowUp: \"triangle\",\n        ArrowDown: \"x\"\n      };\n      const iconPressed = mapping[event.key];\n      if (iconPressed === iconName) {\n        // TODO: fix bug with repeated additions\n        setCountCorrect(countCorrect + 1);\n      }\n      setIconPressed(iconPressed);\n    },\n    {},\n    { dependencies: [iconName, iconPressed, countCorrect] }\n  );\n\n  return (\n    <div className=\"d-flex flex-column align-items-center justify-content-center width-full height-full\">\n      <div style={{ fontSize: 40 }}>\n        {countCorrect} / {countAttempts}\n      </div>\n      <div\n        style={{\n          fontSize: 100,\n          color: iconPressed === iconName ? \"blue\" : \"black\"\n        }}\n      >\n        <RandomIcon iconName={iconName} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}