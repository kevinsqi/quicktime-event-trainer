{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Mode","Icon","_ref","children","react_default","a","createElement","className","style","fontSize","background","borderRadius","RandomIcon","_ref2","iconName","md","io","gi","Error","Trainer","_ref3","mode","setMode","_React$useState","React","useState","_React$useState2","Object","slicedToArray","countCorrect","setCountCorrect","_React$useState3","_React$useState4","countAttempts","setCountAttempts","_React$useState5","_React$useState6","iconPressed","setIconPressed","_React$useState7","_React$useState8","setIconName","useEffect","timer","undefined","Paused","window","clearTimeout","updateIcon","index","_","random","0","1","2","3","setTimeout","KEYS_TO_ICON_NAMES","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","useKey","pressedKey","event","newIconPressed","key","dependencies","color","onClick","Playing","IntroScreen","_ref4","fa","App","_React$useState9","Stopped","_React$useState10","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLA4CKA,qHA9BL,SAASC,EAATC,GAA2D,IAA3CC,EAA2CD,EAA3CC,SACd,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBACVC,MAAO,CAAEC,SAAU,MAAOC,WAAY,OAAQC,aAAc,UAE3DR,GAKP,SAASS,EAATC,GAAuC,IAAjBC,EAAiBD,EAAjBC,SACpB,GAAiB,UAAbA,EACF,OAAO,KAET,GAAiB,MAAbA,EACF,OAAOV,EAAAC,EAAAC,cAACS,EAAA,EAAD,MAET,GAAiB,WAAbD,EACF,OAAOV,EAAAC,EAAAC,cAACU,EAAA,EAAD,MAET,GAAiB,WAAbF,EACF,OAAOV,EAAAC,EAAAC,cAACU,EAAA,EAAD,MAET,GAAiB,aAAbF,EACF,OAAOV,EAAAC,EAAAC,cAACW,EAAA,EAAD,MAET,MAAM,IAAIC,MAAM,iBASlB,SAASC,EAATC,GAAuE,IAApDC,EAAoDD,EAApDC,KAAMC,EAA8CF,EAA9CE,QAA8CC,EAC7BC,IAAMC,SAAS,GADcC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC9DM,EAD8DH,EAAA,GAChDI,EADgDJ,EAAA,GAAAK,EAE3BP,IAAMC,SAAS,GAFYO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE9DE,EAF8DD,EAAA,GAE/CE,EAF+CF,EAAA,GAAAG,EAG/BX,IAAMC,SAAwB,MAHCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG9DE,EAH8DD,EAAA,GAGjDE,EAHiDF,EAAA,GAAAG,EAIrCf,IAAMC,SAAiB,SAJce,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI9DzB,EAJ8D0B,EAAA,GAIpDC,EAJoDD,EAAA,GAMrEhB,IAAMkB,UAAU,WACd,IAAIC,OAA4BC,EA8BhC,OANIvB,IAASrB,EAAK6C,OAChBC,OAAOC,aAAaJ,GAvBtB,SAASK,IAEPV,EAAe,MAGf,IAAMW,EAAQC,IAAEC,OAAO,EAAG,GAQ1BV,EAP2C,CACzCW,EAAG,IACHC,EAAG,SACHC,EAAG,SACHC,EAAG,YAEuBN,IAI5Bf,EAAiB,SAAAD,GAAa,OAAIA,EAAgB,IAGlDU,EAAQG,OAAOU,WAAWR,EAAY,KAMtCA,GAGK,WACLF,OAAOC,aAAaJ,KAErB,CAACtB,IAEJ,IAAMoC,EAAgD,CACpDC,UAAW,SACXC,WAAY,SACZC,QAAS,WACTC,UAAW,KAeb,OAZAC,IACE,SAACC,EAAoBC,GACnB,IAAMC,EAAiBR,EAAmBO,EAAME,KAC3C7B,GAAe4B,IAAmBnD,IACrCgB,EAAgB,SAAAD,GAAY,OAAIA,EAAe,IAC/CS,EAAe2B,KAGnB,GACA,CAAEE,aAAc,CAACrD,EAAUuB,KAI3BjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uFACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,SAAU,KACrBoB,EADH,MACoBI,GAEpB7B,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,IACV2D,MAAO/B,IAAgBvB,EAAW,OAAS,UAG7CV,EAAAC,EAAAC,cAACM,EAAD,CAAYE,SAAUA,KAExBV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,UAAU,4BACV8D,QAAS,WACHhD,IAASrB,EAAK6C,OAChBvB,EAAQtB,EAAKsE,SACJjD,IAASrB,EAAKsE,SACvBhD,EAAQtB,EAAK6C,UAIhBxB,IAASrB,EAAK6C,OAAS,SAAW,WAO7C,SAAS0B,EAATC,GAAyD,IAAlClD,EAAkCkD,EAAlClD,QACrB,OACElB,EAAAC,EAAAC,cAAA,OACEC,UAAU,sFACV8D,QAAS,kBAAM/C,EAAQtB,EAAKsE,WAE5BlE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACW,EAAA,EAAD,OAEFb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACU,EAAA,EAAD,OAEFZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmE,EAAA,EAAD,OAEFrE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmE,EAAA,EAAD,MACArE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,MACArE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,QAGJrE,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACU,EAAA,EAAD,QAGJZ,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACS,EAAA,EAAD,QAGJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,sCArIDP,yEAoJU0E,MAVf,WAAe,IAAAC,EACWnD,IAAMC,SAAezB,EAAK4E,SADrCC,EAAAlD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GACNtD,EADMwD,EAAA,GACAvD,EADAuD,EAAA,GAGb,OAAIxD,IAASrB,EAAKsE,SAAWjD,IAASrB,EAAK6C,OAClCzC,EAAAC,EAAAC,cAACa,EAAD,CAASE,KAAMA,EAAMC,QAASA,IAE9BlB,EAAAC,EAAAC,cAACiE,EAAD,CAAajD,QAASA,KChLbwD,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.327d4c16.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  FaArrowUp,\n  FaArrowDown,\n  FaArrowLeft,\n  FaArrowRight\n} from \"react-icons/fa\";\nimport { GiTriangleTarget } from \"react-icons/gi\";\nimport { IoIosSquareOutline, IoIosRadioButtonOff } from \"react-icons/io\";\nimport { MdClear } from \"react-icons/md\";\nimport useKey from \"use-key-hook\";\nimport _ from \"lodash\";\nimport \"./App.css\";\n\nfunction Icon({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      className=\"d-inline-block\"\n      style={{ fontSize: \"3em\", background: \"#ccc\", borderRadius: \"100px\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction RandomIcon({ iconName }: any) {\n  if (iconName === \"empty\") {\n    return null;\n  }\n  if (iconName === \"x\") {\n    return <MdClear />;\n  }\n  if (iconName === \"circle\") {\n    return <IoIosRadioButtonOff />;\n  }\n  if (iconName === \"square\") {\n    return <IoIosSquareOutline />;\n  }\n  if (iconName === \"triangle\") {\n    return <GiTriangleTarget />;\n  }\n  throw new Error(\"Invalid index\");\n}\n\nenum Mode {\n  Playing = \"Playing\",\n  Paused = \"Paused\",\n  Stopped = \"Stopped\"\n}\n\nfunction Trainer({ mode, setMode }: { mode: Mode; setMode: Function }) {\n  const [countCorrect, setCountCorrect] = React.useState(0);\n  const [countAttempts, setCountAttempts] = React.useState(0);\n  const [iconPressed, setIconPressed] = React.useState<string | null>(null);\n  const [iconName, setIconName] = React.useState<string>(\"empty\");\n\n  React.useEffect(() => {\n    let timer: number | undefined = undefined;\n\n    function updateIcon() {\n      // Reset user input\n      setIconPressed(null);\n\n      // Set new icon\n      const index = _.random(0, 3);\n      const mapping: { [key: number]: string } = {\n        0: \"x\",\n        1: \"circle\",\n        2: \"square\",\n        3: \"triangle\"\n      };\n      const newIconName = mapping[index];\n      setIconName(newIconName);\n\n      // Use \"functional updater form\": https://overreacted.io/a-complete-guide-to-useeffect/\n      setCountAttempts(countAttempts => countAttempts + 1);\n\n      // Recursively continue\n      timer = window.setTimeout(updateIcon, 1000);\n    }\n\n    if (mode === Mode.Paused) {\n      window.clearTimeout(timer);\n    } else {\n      updateIcon();\n    }\n\n    return () => {\n      window.clearTimeout(timer);\n    };\n  }, [mode]);\n\n  const KEYS_TO_ICON_NAMES: { [key: string]: string } = {\n    ArrowLeft: \"square\",\n    ArrowRight: \"circle\",\n    ArrowUp: \"triangle\",\n    ArrowDown: \"x\"\n  };\n\n  useKey(\n    (pressedKey: number, event: any) => {\n      const newIconPressed = KEYS_TO_ICON_NAMES[event.key];\n      if (!iconPressed && newIconPressed === iconName) {\n        setCountCorrect(countCorrect => countCorrect + 1);\n        setIconPressed(newIconPressed);\n      }\n    },\n    {},\n    { dependencies: [iconName, iconPressed] }\n  );\n\n  return (\n    <div className=\"d-flex flex-column align-items-center justify-content-center width-full height-full\">\n      <div style={{ fontSize: 40 }}>\n        {countCorrect} / {countAttempts}\n      </div>\n      <div\n        style={{\n          fontSize: 100,\n          color: iconPressed === iconName ? \"blue\" : \"black\"\n        }}\n      >\n        <RandomIcon iconName={iconName} />\n      </div>\n      <div>\n        <button\n          className=\"btn btn-secondary-outline\"\n          onClick={() => {\n            if (mode === Mode.Paused) {\n              setMode(Mode.Playing);\n            } else if (mode === Mode.Playing) {\n              setMode(Mode.Paused);\n            }\n          }}\n        >\n          {mode === Mode.Paused ? \"Resume\" : \"Pause\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction IntroScreen({ setMode }: { setMode: Function }) {\n  return (\n    <div\n      className=\"d-flex flex-column align-items-center justify-content-center width-full height-full\"\n      onClick={() => setMode(Mode.Playing)}\n    >\n      <div>\n        <h1>Quicktime Event Trainer</h1>\n      </div>\n      <div className=\"mt-5 text-center\">\n        <Icon>\n          <GiTriangleTarget />\n        </Icon>\n        <div className=\"d-flex\">\n          <Icon>\n            <IoIosSquareOutline />\n          </Icon>\n          <div>\n            <div>\n              <FaArrowUp />\n            </div>\n            <div>\n              <FaArrowLeft />\n              <FaArrowDown />\n              <FaArrowRight />\n            </div>\n          </div>\n          <Icon>\n            <IoIosRadioButtonOff />\n          </Icon>\n        </div>\n        <Icon>\n          <MdClear />\n        </Icon>\n      </div>\n      <div className=\"mt-5\">Click anywhere to play.</div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [mode, setMode] = React.useState<Mode>(Mode.Stopped);\n\n  if (mode === Mode.Playing || mode === Mode.Paused) {\n    return <Trainer mode={mode} setMode={setMode} />;\n  } else {\n    return <IntroScreen setMode={setMode} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}